#!/bin/bash
# This is sourced. Fake bang-path to help editors and linters
# shellcheck disable=SC2034  # dont warn about unused variables

#
#  Using '+=' appends new items to the existing list.
#  Using '=' replaces the entire list. This can be useful in project
#  configurations where the global config includes many items that
#  are usually irrelevant but need to be considered for a specific project.
#  By default, 'olint' ignores some typical file patterns. You can override
#  these defaults by using '=' in your global or project-specific config file.
#  Running 'olint -c' will display the current settings, so if the defaults
#  don't meet your needs, you can easily override them.
#

#
#  Use 'skip_plugins' to skip one or more linters. Use this as a template,
#  and uncomment the linters you want to exclude from this project.
#
skip_plugins+=(
    # bandit
    # checkbashisms
    # flake8
    # jsonlint
    # markdownlint
    # mypy
    # pid_valid  # verifies that any pidfile found points to a running process
    # pycodestyle # flake8 handles this; redundant if flake8 is used
    # pylint
    # pylintrc
    # rslint
    # shellcheck
    # vale # not used by default
    # yamllint
)

#
#  Handling what files should be skipped by olint
#

# Filter anything containing this including relative path
excluded_patterns+=(
    # .git/  # sample
)

# Filter relative filename (sans path)
excluded_basenames+=(
    # .gitignore  # sample
)

# Filter relative filename (sans path) by prefix
prefixes+=(
    # test_ # sample
)

# Filter by suffix
suffixes+=(
    # .pyc  # sample
)

# Explicit excludes, give entire filepath as listed by olint
excludes+=(
)

#
# Per-project linter command overrides
#
# override_linter_cmd["shellcheck"]="shellcheck -a -x --color=always -o all"

#
#  Some options that can be pre-defined
#
# ignore_project=yes # Ignore this entire project from being processed
# use_cache=false # Do not use cache
# mime_type_limit=true # Only scan files based on mime-type
# lint_continue=true
# debug_level=9
#
#  Use this to override the location of plugins.
#  Useful if a project config needs to use alternate plugin options
#  or when trying out a new plugin definition.
#  In most cases, leave this empty to use the default location.
#
# plugin_dir="$olint_cfg_dir"/plugins
