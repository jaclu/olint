#!/usr/bin/env bash
# This script is sourced. The fake shebang is included to help editors and linters.
# shellcheck disable=SC2034  # Suppresses warnings about unused variables.
#
# This configuration file is typically set up once as your global default.
# For each individual project, you only need to add overrides or additional
# settings as necessary.
#
# By default, this file is installed to either ~/.config/olint/olint.cfg
# or $XDG_CONFIG_HOME/olint/olint.cfg, depending on your environment.
# Running ./deploy will not overwrite an existing configuration file.
# If a config file already exists, you can either delete it or manually
# incorporate the new settings into your existing configuration.
#
# Configuration Notes:
# - Using '+=' appends new items to the existing list.
# - Using '=' replaces the entire list. This can be useful for project-specific
#   configurations where the global config includes many items that are
#   irrelevant but need consideration for a specific project.
#
# By default, olint ignores some common file patterns. You can override
# these defaults by using = in your global or project-specific config file.
# Running 'olint -c' will display the current settings. If the defaults
# don't meet your needs, you can override them here.

#  Use 'skip_linters' to disable specific linters from your workflow or
# for a specific project.
#  Uncomment the linters you want to exclude from being run.
skip_linters+=(
    # ansible-lint  # Checks ansible playbooks for practices and behaviour
    # bandit        # Security linter for Python code
    # bashate       # Code style enforcement for bash programs
    bash-n          # Extremely basic check, should only be enabled
                    #   if shellcheck is unavailable
    # black         # Python code formatter
    # checkbashisms # Checks for portability issues in shell scripts
    # codespell     # Fix common misspellings in source code and text files
    # cppcheck      # Linter for C & C++
    # flake8        # Python linter; handles multiple PEP 8 violations
    # isort         # Sort Python imports automatically
    # jsonlint      # JSON file linter
    # markdownlint  # Linter for Markdown files
    # mypy          # Static type checker for Python
    # pycodestyle   # PEP 8 style checker; redundant if flake8 is used
    # pyflakes      # Passive checker of Python 3 programs
    # pylint        # Comprehensive Python code linter
    # pylintrc      # Only checks the configuration file for pylint
    # pymarkdown    # Linter for Markdown files
    # pyright       # Static type checker for Python
    # rslint        # Linter for Rust code
    # ruff          # Extremely fast Python linter, written in Rust
    # shellcheck    # Linter for shell scripts
    # yamllint      # Linter for YAML files
)

#  =====  Handling which files should be skipped by 'olint'.  =====

# Patterns to exclude from linting, anything starting with this will be excluded
excluded_prefixes+=(
    __pycache__/
    .git/
    .mypy_cache/
    .pytest_cache/
    .ruff_cache/
    .venv/
    .vscode/
)

# Patterns in this list, when matched with items in excluded_prefixes,
# will be hidden from the output when running olint with the -e option.
# This prevents the -e output from being cluttered with potentially
# hundreds or thousands of lines for common patterns like .git/, which
# are typically unnecessary to display.
#
# When running olint with the -E option, these patterns will be listed
# as explicitly excluded files or directories, providing visibility into
# what is being suppressed.
hidden_patterns=( # exclude from display of excluded_prefixes unless -E is used
    __pycache__/
    .git/
    .mypy_cache/
    .pytest_cache/
    .ruff_cache/
    .venv/
    .vscode/
)

# Exclude files based on their filename suffix.
# This is useful for skipping files with specific extensions or endings.
excluded_suffixes=( # excludes by filename suffix
    \~
    \#
    .pyc  # Example: Exclude compiled Python files.
    .tmp
)

# Exclude specific files by specifying their entire filename as listed by 'olint'.
excludes+=(
    # path/to/file  # Example: Exclude a specific file.
)

# Exclude specific files based on their basename (filename without the path).
excluded_basenames+=(
    .cache.olint
)

# Exclude files based on their basename (filename without the path) prefix.
excluded_basename_prefixes+=(
    \#
)

# List linters that should run on the whole project, not on individual files
project_linters+=(
)

# linter command overrides.
# Use these overrides to customize how specific linters are executed for
# this project.
#
# override_linter_cmd["shellcheck"]="shellcheck -a -x --color=always -o all"
# The above example customizes the shellcheck command to include additional options.

#
# Additional configuration options that can be pre-defined:
#
# ignore_project=yes   # Ignore this entire project from being processed.
#                         Essentially prevent olint from running in this project
# use_cache=false      # Disable the use of cache for linting results.
# mime_type_limit=true # Only scan files based on their MIME type.
# lint_continue=true   # Continue linting even if errors are found.
# debug_level=9        # Set the verbosity of debug output.

#
# Use this to override the location of plugins.
# This is useful if a project config needs to use alternate plugin options,
# or when trying out a new plugin definition.
# In most cases, leave this empty to use the default plugin location.
#
# olint_plugin_dir="/tmp/foo/olint_plugins"
