#!/usr/bin/env bash
#
#  Part of https://github.com/jaclu/olint
#
#  Copyright (c) 2024: Jacob.Lundqvist@gmail.com
#
#  License: MIT
#
#  lists the entire file tree, then does a global
#  reverse sort, in order to process most recently
#  changed files first, disregarding what folder they are in.
#
#  For those file types that a linter is defined, linting is done
#  in the order the files are found. This means the last changed
#  file is the first to be checked.
#

error_msg() {
    #
    #  Display error to /dev/stderr, and exit if exit code > -1
    #
    local msg="$1"
    local exit_code="${2:-1}"

    if [[ -z "$msg" ]]; then
        echo
        echo "error_msg() no param"
        env_cleanup 9
    fi
    printf "\\n\\nERROR: %s\\n\\n" "$msg" >&2
    [[ "$exit_code" -gt -1 ]] && env_cleanup "$exit_code"
}

dbg_print() {
    #
    #  Displays info to /dev/stderr
    #
    local msg="$1"
    local this_debug_level="${2:-1}"
    [[ "$debug_level" -ge "$this_debug_level" ]] || return
    printf "%s>%*s%s\\n" "$this_debug_level" "$dbg_indent" "" "$msg" >&2
}

env_cleanup() {
    #
    #  Call this instead of exit, to ensure any cleanup will happen
    #
    ex_code="${1:-1}"
    cache_write
    rm -f "$f_linter_output"
    exit "$ex_code"
}

get_config() {
    local dbg_indent=$dbg_indent
    local f_config

    dbg_print "get_config()"
    ((dbg_indent++)) # increase indent until this returns

    #  Selects config location
    if [[ -n "$XDG_CONFIG_HOME" ]]; then
        olint_cfg_dir="$XDG_CONFIG_HOME"/olint
    else
        olint_cfg_dir=~/.config/olint
    fi
    mkdir -p "$olint_cfg_dir" || {
        error_msg "Failed to create folder: $olint_cfg_dir"
    }

    #
    #  Defaults that can be overriden in config files
    #
    plugin_dir="$olint_cfg_dir"/plugins
    skip_plugins=() # plugins to skip in this project
    excludes=(
        .cache.olint
    )           #  Specifix excludes
    prefixes=() # Excludes by prefix
    suffixes=() # Excludes by suffix

    #  handling base configuration
    f_config="$olint_cfg_dir"/config
    [[ -f "$f_config" ]] && {
        dbg_print "base configuration: $f_config"
        # shellcheck source=/dev/null
        source "$f_config" || error_msg "Failed to source default config: $f_config"
    }

    #  handling project configuration
    f_config=".olint.conf"
    if [[ -f "$f_config" ]]; then
        dbg_print "project configuration: $f_config"
        # shellcheck source=/dev/null
        source "$f_config" || error_msg "Failed to source project config: $f_config"
    fi

    check_linter_plugins "$plugin_dir"

    # Remove dupes
    mapfile -t skip_plugins < <(printf "%s\n" "${skip_plugins[@]}" | sort -u)
    mapfile -t prefixes < <(printf "%s\n" "${prefixes[@]}" | sort -u)
    mapfile -t suffixes < <(printf "%s\n" "${suffixes[@]}" | sort -u)
}

display_config() {
    local linter_name
    local keys
    local ext
    local file_type
    local lst
    local item

    dbg_print "display_config()" "$dbglvl_lintscan_basic"

    echo "---  Display olint configuration  ---"
    echo
    echo "Linters defined:"
    for linter_name in "${!linter_cmd[@]}"; do
        echo " $linter_name  - ${linter_cmd[$linter_name]}"
    done
    echo

    echo "Supported extensions:"
    keys=$(for ext in "${!linter_extensions[@]}"; do echo "$ext"; done | sort)
    for ext in $keys; do
        echo " $ext  -  ${linter_extensions[$ext]}"
    done
    echo

    echo "Supported File types: (lower cased for compatability)"
    for file_type in "${!linter_file_types[@]}"; do
        echo " '$file_type'  -  ${linter_file_types[$file_type]}"
    done

    lst="${skip_plugins[*]}"
    [[ -n "$lst" ]] && {
        echo
        echo "Plugins skipped in .olint.conf:"
        for item in $lst; do
            echo "  $item"
        done
    }

    lst="${excludes[*]}"
    [[ -n "$lst" ]] && {
        echo
        echo "Excluded items in .olint.conf:"
        for item in $lst; do
            echo "  $item"
        done
    }

    lst="${prefixes[*]}"
    [[ -n "$lst" ]] && {
        echo
        echo "Excluded prefixes in .olint.conf:"
        for item in $lst; do
            echo "  $item"
        done
    }

    lst="${suffixes[*]}"
    [[ -n "$lst" ]] && {
        echo
        echo "Excluded suffixes in .olint.conf:"
        for item in $lst; do
            echo "  $item"
        done
    }
}

#===============================================================
#
#   Data Types
#
#===============================================================

is_integer() {
    dbg_print "is_integer($1)" "$dbglvl_data_types"
    if [[ $1 =~ ^[0-9]+$ ]]; then
        return 0 # It's an integer
    else
        return 1 # It's not an integer
    fi
}

#===============================================================
#
#   Cache handling
#
#===============================================================

cache_write() {
    local dbg_indent=$dbg_indent

    dbg_print "cache_write()"
    ((dbg_indent++)) # increase indent until this returns

    # abort if not using cache
    $use_cache || {
        dbg_print "skipped task due to not using cache"
        return
    }

    # If no changes have happened, no need to save cache
    $cache_is_changed || {
        dbg_print "skipped task due to no changes"
        return
    }

    # clear previous cache
    echo "$olint_cache_version" >"$f_cache_file"

    # Loop through the array and write all lines in one go
    for key in "${!cache_new[@]}"; do
        value="${cache_new[$key]}"
        echo "$value|$key"
    done >>"$f_cache_file"
    echo
    echo "${#cache_new[@]} successfully linted files cached: $f_cache_file"
}

cache_read() {
    #
    #  First line is expected to contain an identifier
    #
    local dbg_indent=$dbg_indent
    local waiting_for_header=true
    local IFS
    local f_name
    local f_date
    local f_mtime

    dbg_print "cache_read()"
    ((dbg_indent++)) # increase indent until this returns

    # abort if not using cache
    $use_cache || {
        dbg_print "skipped task due to not using cache"
        return
    }

    # Check if the file exists and is readable
    if [[ -r "$f_cache_file" ]]; then
        dbg_print "found cache file: $f_cache_file" 3

        # Read each line of the file and add to the array

        while IFS= read -r cached_line; do
            dbg_print "read line: $cached_line" 3
            if $waiting_for_header; then
                [[ "$cached_line" = "$olint_cache_version" ]] || {
                    echo
                    echo "Incorrect cache version"
                    echo "  expected: [$olint_cache_version]"
                    echo "  found:    [$cached_line]"
                    echo
                    echo "Will ignore this cache and replace it in 3 seconds - hit Ctrl-C to abort!"
                    sleep 3
                    break
                }
                waiting_for_header=false
                dbg_print "found correct header: $olint_cache_version" 3
                continue
            else
                IFS='|' read -r f_mtime f_date f_name <<<"$cached_line"
                cache_old["$f_name"]="$f_mtime|$f_date"
            fi
        done <"$f_cache_file"
    fi
}

get_cache_item() {
    #
    #  Returns true ands sets the following global variables
    #  if item matching f_to_check is present in the old cache
    #
    #   f_name
    #   f_mtime
    #   f_date
    #
    local f_to_check="$1"
    local dbg_indent=$dbg_indent
    local cached_item

    dbg_print "get_cache_item($f_to_check)" "$dbglvl_cache_events_more"
    ((dbg_indent++)) # increase indent until this returns

    #
    #  [[ -v cache_old["$f_to_check"] ]] doesnt work on Debian 10
    #  instead first extract it to a variable, then do the check
    #
    cached_item="${cache_old["$f_to_check"]}"
    [[ -n "$cached_item" ]] || {
        dbg_print "item not found" "$((dbglvl_cache_events_more + 1))"
        return 1 # false
    }
    f_name="$f_to_check"
    IFS='|' read -r f_mtime f_date <<<"${cache_old[$f_name]}"
    return 0 # true
}

filename_is_cached() {
    #
    #  If file was in the old cache and is unchanged, this adds
    #  the entry to the new cache and returns True
    #
    local f_to_check="$1"
    local dbg_indent=$dbg_indent

    $use_cache || return 1 # False

    dbg_print "filename_is_cached($f_to_check)" \
        "$dbglvl_cache_events_more"
    ((dbg_indent++)) # increase indent until this returns

    #echo ">= filename_is_cached($1)"
    [[ -z "$f_to_check" ]] && error_msg "filename_is_cached() - called without param"

    #
    #  If f_to_check was present the following variables are set:
    #   f_name f_mtime f_date
    #
    get_cache_item "$f_to_check" || return 1 # False
    [[ "$(get_mtime "$f_name" || true)" -eq "$f_mtime" ]] && {
        cache_add "$f_name" "$f_mtime" "$f_date"
        return 0 # true
    }
    return 1 # False
}

cache_add() {
    #
    #  If available, iving f_mtime and f_date saves a recalculation
    #  and boosts performance.
    #
    local dbg_indent=$dbg_indent
    local f_name="$1"
    local f_mtime="$2" # optional param
    local f_date="$3"  # optional param

    dbg_print "cache_add($f_name)" "$dbglvl_cache_events_basic"
    ((dbg_indent++)) # increase indent until this returns

    $use_cache || return
    [[ -z "$f_mtime" ]] && f_mtime="$(get_mtime "$f_name")"
    [[ -z "$f_date" ]] && f_date="$(mtime_2_date "$f_mtime")"

    cache_is_changed=true
    cache_new["$f_name"]="$f_mtime|$f_date"
    dbg_print "added $f_name = $f_mtime|$f_date" "dbglvl_cache_events_more"
}

#===============================================================
#
#   File Age related
#
#===============================================================

recent_enough() {
    local dbg_indent=$dbg_indent
    local f_name="$1"
    local current_time
    local span_in_seconds

    dbg_print "recent_enough()" 8
    ((dbg_indent++)) # increase indent until this returns

    case "$h_max_age" in
    0) return 0 ;;  # Return right away if no max age is used
    -1) return 1 ;; # Always fail in -s mode
    *) ;;
    esac

    [[ "$h_max_age" = "0" ]] && return 0 # True - No time limit

    if [[ -z "$t_cutoff" ]]; then
        #
        #  For performance reasons only calculate once, and
        #  use a global var
        #
        current_time=$(date +%s) # Get current time in seconds since epoch
        span_in_seconds="$((3600 * h_max_age))"
        t_cutoff="$((current_time - span_in_seconds))"
    fi

    [[ "$(get_mtime "$f_name" || true)" -lt "$t_cutoff" ]] && {
        return 1 # False
    }
    return 0 # True
}

get_mtime() {
    local fname="$1"

    dbg_print "get_mtime($fname)" "$dbglvl_data_types"
    if [[ "$this_uname" == "Darwin" ]]; then
        # macOS version
        stat -f "%m" "$fname"
    else
        # Linux version
        stat -c "%Y" "$fname"
    fi
}

mtime_2_date() {
    local f_mtime
    local as_date

    dbg_print "mtime_2_date($1)" "$dbglvl_data_types"
    if is_integer "$1"; then
        f_mtime="$1"
    else
        # Assume it is a file name
        f_mtime="$(get_mtime "$1"))"
    fi

    case "$this_uname" in
    "Darwin") as_date="$(date -r "$f_mtime" +'%Y-%m-%d %H:%M:%S')" ;;
    *) as_date="$(date -d "@$f_mtime" +'%Y-%m-%d %H:%M:%S')" ;;
    esac

    dbg_print "result [$as_date]" "$((dbglvl_data_types + 1))"
    echo "$as_date"
}

#===============================================================
#
#   Linting actions
#
#===============================================================

# Function to sort linters based on priorities
sort_linters() {
    local -n linters_array=$1
    local sorted_linters=()

    dbg_print "sort_linters(${linters_array[*]}" "$dbglvl_lintscan_details"

    if test -d /proc/ish; then
        #
        #  iSH kernel doesnt support enough of /proc to make mapfile work
        #
        # shellcheck disable=SC2207
        sorted_linters=($(
            for linter in "${linters_array[@]}"; do
                echo "$linter ${linter_priorities[$linter]}"
            done | sort -k2n | awk '{print $1}'
        ))
    else
        mapfile -t sorted_linters < <(
            for linter in "${linters_array[@]}"; do
                echo "$linter ${linter_priorities[$linter]}"
            done | sort -k2n | awk '{print $1}'
        )
    fi
    # dbg_print "sort_linters() - sorted [${sorted_linters[*]}]" 0
    echo "${sorted_linters[@]}"
}

add_plugin_extension() {
    local dbg_indent=$dbg_indent
    local plugin="$1"
    local plugin_priority="$2"
    local ext="$3"
    local item
    local unsorted

    dbg_print "add_plugin_extension($plugin, $plugin_priority, $ext)" "$dbglvl_lintscan_basic"
    ((dbg_indent++)) # increase indent until this returns
    if [[ -z "${linter_extensions[$ext]}" ]]; then
        linter_extensions[$ext]="$plugin"
    else
        for item in ${linter_extensions[$ext]}; do
            [[ "$item" = "$plugin" ]] && return 0
        done
        linter_extensions[$ext]+=" $plugin"

        unsorted=()
        for itm in ${linter_extensions[$ext]}; do
            unsorted+=("$itm")
        done
        linter_extensions[$ext]="$(sort_linters unsorted)"
    fi
}

add_plugin_file_type() {
    local dbg_indent=$dbg_indent
    local plugin="$1"
    local file_type="$2"
    local item

    lc_file_type="${file_type,,}"
    dbg_print "add_plugin_file_type($plugin, $lc_file_type)" "$dbglvl_lintscan_basic"
    ((dbg_indent++)) # increase indent until this returns

    if [[ -z "${linter_file_types[$lc_file_type]}" ]]; then
        linter_file_types[$lc_file_type]="$plugin"
    else
        for item in ${linter_file_types[$lc_file_type]}; do
            [[ "$item" = "$plugin" ]] && return 0
        done
        linter_file_types[$lc_file_type]+=" $plugin"

        unsorted=()
        for itm in ${linter_file_types[$lc_file_type]}; do
            unsorted+=("$itm")
        done

        sorted_items="$(sort_linters unsorted)"
        linter_file_types[$lc_file_type]="$sorted_items"
    fi
}

parse_plugin_file() {
    local dbg_indent=$dbg_indent
    local plugin_def="$1"
    local plugin_priority
    local plugin_name
    local plugin_cmd
    local item
    local plugin_extensions
    local plugin_file_types
    local cmd_ok

    dbg_print "parse_plugin_file($plugin_def)" "$dbglvl_lintscan_basic"
    ((dbg_indent++)) # increase indent until this returns

    plugin_priority=10 # set a default priority

    # shellcheck disable=SC1090
    source "$plugin_def"
    dbg_print "sourced: $plugin_def" 3

    [[ -z "$plugin_name" ]] && {
        dbg_print "Plugin $plugin_def - missing: plugin_name" 0
        return 1 # False
    }

    [[ -z "$plugin_cmd" ]] && {
        dbg_print "Plugin $plugin_def - missing: plugin_cmd" 0
        return 1 # False
    }

    for item in "${skip_plugins[@]}"; do
        [[ "$item" = "$plugin_name" ]] && return 1 # False
    done

    cmd_ok="$(verify_lint_cmd "$plugin_cmd")"
    [[ -z "$cmd_ok" ]] && {
        dbg_print "Bad command for $plugin_name: [$plugin_cmd]"
        return 1 # False
    }
    linter_cmd["$plugin_name"]="$cmd_ok"

    linter_priorities["$plugin_name"]="$plugin_priority"

    [[ ${#plugin_extensions[@]} -eq 0 ]] &&
        [[ ${#plugin_file_types[@]} -eq 0 ]] && {

        error_msg "Plugin $plugin_def - neither " \
            "plugin_extensions nor plugin_file_types defined"
    }

    for ext in "${plugin_extensions[@]}"; do
        add_plugin_extension "$plugin_name" "$plugin_priority" "$ext"
    done

    for file_type in "${plugin_file_types[@]}"; do
        lowercase_plugin_name="${plugin_name,,}"
        add_plugin_file_type "$lowercase_plugin_name" "$file_type"
    done
    return 0 # True
}

check_linter_plugins() {
    local dbg_indent=$dbg_indent
    local plugin_dir="$1"
    local file_type

    [[ -z "$plugin_dir" ]] && {
        error_msg "check_linter_plugins() - called with no plugin_dir param"
    }

    dbg_print "check_linter_plugins($plugin_dir)"
    ((dbg_indent++)) # increase indent until this returns

    for plugin_def in "$plugin_dir"/*; do
        if [[ -f "$plugin_def" ]]; then
            # skip files ending with ~
            [[ "${plugin_def%"~"}" != "$plugin_def" ]] && continue
            parse_plugin_file "$plugin_def"
        fi
    done
}

do_parse_linter_def() {
    #
    #  Handles the different notations
    #   linter_cmd
    #   linter_cmd -with -options
    #   ""
    #
    local dbg_indent=$dbg_indent
    local lint_cmd="$1"
    local cmd
    local options
    local verif_cmd

    dbg_print "do_parse_linter_def($lint_cmd)" "$dbglvl_lintscan_details"
    ((dbg_indent++)) # increase indent until this returns
    if [[ -z "$lint_cmd" ]]; then
        cmd=""
        options=""
    elif [[ "${lint_cmd%"${lint_cmd#?}"}" = "-" ]]; then
        error_msg "linter cmd starts with  [$lint_cmd]" -1
        cmd=""
        options=""
    else
        cmd="$(echo "$lint_cmd" | cut -d' ' -f1)"
        options="$(echo "$lint_cmd" | cut -d' ' -f2-)"
    fi

    # if there were no options they will be the same
    [[ "$options" = "$cmd" ]] && options=""

    if [[ -n "$cmd" ]]; then
        verif_cmd="$(command -v "$cmd")" || {
            verif_cmd=""
        }
    else
        verif_cmd=""
    fi
    [[ -z "$verif_cmd" ]] && {
        cmd=""
        options=""
    }

    [[ -n "$verif_cmd" ]] && [[ -n "$options" ]] &&
        verif_cmd="$verif_cmd $options"
    echo "$verif_cmd"
    return 0 # True
}

verify_lint_cmd() {
    local dbg_indent=$dbg_indent
    local lint_cmd="$1"
    local cmd_parsed

    dbg_print "verify_lint_cmd($lint_cmd)" "$dbglvl_lintscan_details"
    ((dbg_indent++)) # increase indent until this returns

    if cmd_parsed="$(do_parse_linter_def "$lint_cmd")"; then
        echo "$cmd_parsed"
    else
        error_msg "Failed to parse lint cmd: $lint_cmd"
    fi
    # dbg_print "result [$cmd_parsed]"
}

handle_linting_error() {
    #
    #  Either write out allready processed files to cache and then exit
    #  or continue based upon
    #
    dbg_print "handle_linting_error()"
    $lint_continue && return
    env_cleanup 1
}

show_linter_action() {
    #
    #  Display what linter is used and what file is processed
    #
    local fname="$1"
    local linter="$2"

    # Print using printf with fixed-width formatting
    printf "%-14s: %s\\n" "$linter" "$fname"
}

lint_file() {
    local linter="$1"
    local fname="$2"

    #
    #  In order to avoid some linters untrapping Ctrl-C
    #  they are run in the background. Then some code to ensure the
    #  exit code of the linter is captured
    #
    eval "${linter_cmd["$linter"]}" "$fname" >"$f_linter_output" 2>&1 &
    lint_pid=$!
    wait "$lint_pid"
    lint_exit_status=$?

    # shellch eck disable=SC2181
    if [[ "$lint_exit_status" -eq 0 ]]; then
        return 0 # True
    else
        cat "$f_linter_output"
        handle_linting_error
    fi
    return 1 # False
}

#===============================================================
#
#   Process files
#
#===============================================================

should_fname_be_excluded() {
    #
    #  Check if fname matches exclusion rules
    #
    local fname="$1"

    for exclude in "${excludes[@]}"; do
        [[ "$fname" == "$exclude" ]] && return 0
    done

    for prefix in "${prefixes[@]}"; do
        [[ "$fname" == "$prefix"* ]] && return 0
    done

    for suffix in "${suffixes[@]}"; do
        [[ "$fname" == *"$suffix" ]] && return 0
    done

    return 1
}

# shellcheck disable=SC2317
handle_ctrl_c() {
    trap '' INT # abort capturing Ctrl-C
    echo
    echo "Ctrl-C captured, terminating olint"
    echo
    echo "Saving allready checked files to cache"
    env_cleanup 1
}

lint_by_ext() {
    local dbg_indent=$dbg_indent
    local fname="$1"
    local extension
    local linter_found
    local linter_found_issue
    local linter

    dbg_print "lint_by_ext($fname)"
    ((dbg_indent++)) # increase indent until this returns

    extension="${fname##*.}"
    if [[ "$extension" != "$fname" ]]; then
        extension=".$extension"
    else
        return 1 # False
    fi
    case "$extension" in
    *"/"*) return 1 ;; # . was in part of path
    *) ;;
    esac

    linter_found=false
    [[ -n "$extension" ]] && {
        #
        #  Processing by extension
        #
        linter_found_issue=false
        for linter in ${linter_extensions[$extension]}; do
            linter_found=true
            show_linter_action "$fname" "$linter"
            lint_file "$linter" "$fname" || linter_found_issue=true
        done
        if $linter_found; then
            dbg_print "processed by ext handler - $fname" 2
            $linter_found_issue || {
                cache_add "$fname"
            }
            return 0 # True
        fi
    }
    return 1 # False
}

lint_by_file_type() {
    local dbg_indent=$dbg_indent
    local fname="$1"
    local file_type="$2"
    local linter_found_issue
    local linter_found
    local lf_type
    local linter

    dbg_print "Examing fname file_type [$file_type]" 2
    ((dbg_indent++)) # increase indent until this returns

    linter_found_issue=false
    linter_found=false
    for lf_type in "${!linter_file_types[@]}"; do
        # shellcheck disable=SC2053
        [[ "$file_type" == $lf_type ]] || {
            continue
        }
        # iterate over linters matching lf_type
        for linter in ${linter_file_types[$lf_type]}; do
            linter_found=true
            show_linter_action "$fname" "$linter"
            lint_file "$linter" "$fname" || linter_found_issue=true

            # not needed for visual inspection, but might be handy for
            # log analysis to get both lf_type and linter in one line
            dbg_print "processed as '$lf_type' - $linter" 9
        done
    done
    if $linter_found; then
        $linter_found_issue || {
            cache_add "$fname"
        }
        return 0 # True - next file
    fi
    dbg_print "Unsupported file_type - $file_type" 3
    return 1 # False - next file_type

}

generate_list_of_files_to_process() {
    #
    #  Sets all_files to be a reverse chronological order list
    #  of all files in the current file tree
    #
    dbg_print "generate_list_of_files_to_process()"

    printf "Generating sorted tree of all files..."
    if [[ $this_uname == "Darwin" ]]; then
        # macOS version
        # shellcheck disable=SC2312
        mapfile -t all_files < <(find . -type f -exec stat -f '%m %N' {} \; | sort -n -r -k1,1 | cut -d' ' -f2- | sed 's#^\./##')
    else
        if test -d /proc/ish; then
            #
            #  iSH kernel doesnt support enough of /proc to make mapfile work
            #
            # shellcheck disable=SC2207
            all_files=($(find . -type f -printf '%T@ %p\n' | sort -n -r -k1,1 | cut -d' ' -f2- | sed 's#^\./##'))
        else
            # all_files=($(find . -type f -printf '%T@ %p\n' | sort -n -r -k1,1 | cut -d' ' -f2))
            # shell  check disable=SC2312
            mapfile -t all_files < <(find . -type f -printf '%T@ %p\n' | sort -n -r -k1,1 | cut -d' ' -f2- | sed 's#^\./##')
        fi
    fi
    echo "done!"
}

process_file_tree() {
    #
    #  Loop over al files, sorted by file age, newest firtst.
    #  Then identifying filetype using: file -b
    #  grouping by type, and linting files suitable for such
    #  as they come up. Thereby minimizing pointless wait time, since
    #  the file tree is globally sorted by age
    #
    local dbg_indent=$dbg_indent
    local all_files
    local fname
    local linter_found
    local file_types
    local file_type

    dbg_print "process_file_tree()"
    ((dbg_indent++)) # increase indent until this returns

    generate_list_of_files_to_process

    trap 'handle_ctrl_c INT' INT

    orig_dbg_indent=$dbg_indent
    # only_check="files_to_check/profile"
    for fname in "${all_files[@]}"; do
        dbg_indent=$orig_dbg_indent

        linter_found=false
        [[ -d "$fname" ]] && continue

        # [[ "$fname" = "files_to_check/base.py" ]] || continue

        should_fname_be_excluded "$fname" && continue

        dbg_print "Examining file: $fname" 1
        ((dbg_indent++)) # increase indent until this returns

        # abort if a time limit was set
        recent_enough "$fname" || {
            # maintain cache items if this run is time limited
            dbg_print "to old to be processed" 3
            filename_is_cached "$fname"
            continue
        }

        filename_is_cached "$fname" && {
            echo "no changes: $fname"
            continue
        }

        lint_by_ext "$fname" && { #  Processing by file extension
            linter_found=true
            continue
        }

        #
        #  Processing by file type
        #
        IFS='|' read -r -a file_types <<<"$(file -b "$fname" |
            tr '[:upper:]' '[:lower:]' | sed 's#, #|#g')"
        for file_type in "${file_types[@]}"; do
            lint_by_file_type "$fname" "$file_type" && {
                linter_found=true
                break
            }
        done

        $linter_found || {
            show_linter_action "$fname" "= No linter ="
        }
    done

    # trap '' INT # abort capturing Ctrl-C
}

show_help() {
    echo "Usage: $prog_name [-h] [-c] [-C] [--config-dir] [-n] [-N] [-v] [number]

Lint all files recursively in reverse chronological order.

Available options:

-h, --help        Print this help and exit
-c, --config      List supported and used linters and excluded file patterns
-C, --continue    Continue with the next file after linter issues are found
--config-dir      Prints out where global config files are located
-n, --nocache     Don't use caching for successfully linted files
-N, --clearcache  Remove cache file if present
-v, --verbose     Increase verbosity. Multiple -v flags can be used to
                  increase verbosity level.
number            Only check files changed in the last number hours

Supported linters: shellcheck, checkbashisms, flake8, vale

If a file is successfully linted, the filename and time of the latest change
are saved in a cache (.cache.olint). Next time olint is run, files that have
not been changed are skipped.

The .olint.conf file can be used to define which linters should be used and
optionally set specific parameters for them. This file can also define which
files should be ignored. See README.md for more information about this file.
"
    env_cleanup 0
}

#===============================================================
#
#   Main
#
#===============================================================

prog_name=$(basename "$0")
this_uname="$(uname -s)"

dbg_indent=1 # used to indent printoutd in dbg_print
#
#  Some debug level constants, to make it easier to limit what
#  is displayed
#
dbglvl_cache_events_basic=3
dbglvl_cache_events_more="$((dbglvl_cache_events_basic + 1))"
dbglvl_lintscan_basic=3
dbglvl_lintscan_details="$((dbglvl_lintscan_basic + 1))"
dbglvl_data_types=8

# Will only be updated if cache format is changed
olint_cache_version="olint cache vers: 0.3.1"
cache_is_changed=false
f_cache_file=".cache.olint" # mtime|date|fname
declare -A cache_old        # What is read from cache file
declare -A cache_new        # What will be written to cache file

f_linter_output=/tmp/olint["$$"]-linter-output

declare -A linter_cmd
declare -A linter_priorities
declare -A linter_extensions
declare -A linter_file_types

lint_continue=false # option: -c
show_config=false   # option: -l
use_cache=true      # option: -n
# show_stats=false        # (unofficial olint dev) option: -s
debug_level=0 # option: -v
h_max_age=0   # no max file age for items to be processed

while [[ -n "$1" ]]; do
    case $1 in

    -h | --help)
        # shellcheck disable=SC2317
        show_help || error_msg "show_help() failure"
        ;;

    -c | --config) show_config=true ;;
    -C | --continue) lint_continue=true ;;

    --config-dir) # Suport for ./deploy - prints out the config dir
        get_config
        echo "$olint_cfg_dir"
        env_cleanup 0
        ;;

    -n | --nocache) use_cache=false ;;

    -N | --clearcache)
        if [[ -f "$f_cache_file" ]]; then
            echo "Removing $f_cache_file"
            rm -f "$f_cache_file"
        else
            echo "No cache found: $f_cache_file"
        fi
        env_cleanup 0
        ;;

    -v | --verbose) ((debug_level++)) ;;

    *[!0-9]*) error_msg "Unrecognized option: $1" ;;

    *) # only remaining param type is an int
        h_max_age="$1"
        echo "Will only check files changed in the last $h_max_age"
        ;;

    esac
    shift
done

[[ "$debug_level" -gt 0 ]] && echo "Debug lvl is: $debug_level"

get_config

$lint_continue && echo "Will contine with next file if linter found issues"
$use_cache || echo "Will not use cache for checked files"
echo

$show_config && {
    display_config
    env_cleanup 0
}

cache_read
process_file_tree
env_cleanup 0
