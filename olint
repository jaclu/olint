#!/usr/bin/env bash
#
#  Part of https://github.com/jaclu/olint
#
#  Copyright (c) 2024: Jacob.Lundqvist@gmail.com
#
#  License: MIT
#
#  lists the entire file tree, then does a global
#  reverse sort, in order to process most recently
#  changed files first, disregarding what folder they are in.
#
#  For those file types that a linter is defined, linting is done
#  in the order the files are found. This means the last changed
#  file is the first to be checked.
#

error_msg() {
    #
    #  Display error to /dev/stderr, and exit if exit code > -1
    #
    local msg="$1"
    local exit_code="${2:-1}"

    if [[ -z "$msg" ]]; then
        echo
        echo "error_msg() no param"
        env_cleanup 9
    fi
    printf "\\n\\nERROR: %s\\n\\n" "$msg" >&2
    [[ "$exit_code" -gt -1 ]] && env_cleanup "$exit_code"
}

dbg_print() {
    #
    #  Displays info to /dev/stderr
    #
    local msg="$1"
    local this_debug_level="${2:-1}"
    [[ "$debug_level" -ge "$this_debug_level" ]] || return
    printf "v%s>%*s%s\\n" "$this_debug_level" "$dbg_indent" "" "$msg" >&2
}

env_cleanup() {
    ex_code="${1:-1}"
    #
    #  Call this instead of exit, to ensure any cleanup will happen
    #
    rm -f "$f_linter_output"
    exit "$ex_code"
}

select_config_dir() {
    #
    #  Selects config location
    #
    if [[ -n "$XDG_CONFIG_HOME" ]]; then
        olint_cfg_dir="$XDG_CONFIG_HOME"/olint
    else
        olint_cfg_dir=~/.config/olint
    fi
    mkdir -p "$olint_cfg_dir" || {
        error_msg "Failed to create folder: $olint_cfg_dir"
    }
}

get_config() {
    local dbg_indent=$dbg_indent
    local f_config

    dbg_print "get_config()"
    ((dbg_indent++)) # increase indent until this returns

    #
    #  Defaults that can be overriden in config files
    #
    linter_shellcheck=shellcheck
    linter_checkbashisms=checkbashisms
    linter_flake8=flake8
    linter_vale=vale

    excludes=(
        .cache.olint
    )           #  Specifix excludes
    prefixes=() # Excludes by prefix
    suffixes=() # Excludes by suffix

    #
    #  handling base configuration
    #
    f_config="$olint_cfg_dir"/config
    [[ -f "$f_config" ]] && {
        dbg_print "base configuration: $f_config"
        # shellcheck source=/dev/null
        source "$f_config" || error_msg "Failed to source default config: $f_config"
    }

    #
    #  handling project configuration
    #
    f_config=".olint.conf"
    if [[ -f "$f_config" ]]; then
        dbg_print "project configuration: $f_config"
        # shellcheck source=/dev/null
        source "$f_config" || error_msg "Failed to source project config: $f_config"
    fi

    dbg_print "---  Configuration used  ---" 2
    dbg_print "linter_shellcheck: $linter_shellcheck" 2
    dbg_print "linter_checkbashisms: $linter_checkbashisms" 2
    dbg_print "linter_flake8: $linter_flake8" 2
    dbg_print "linter_vale: $linter_vale" 2
    dbg_print "prefixes ${prefixes[*]}" 2
    dbg_print "suffixes ${suffixes[*]}" 2
    dbg_print "excludes ${excludes[*]}" 2
}

#===============================================================
#
#   Data Types
#
#===============================================================

is_integer() {
    dbg_print "is_integer($1)" "$dbglvl_data_types"
    if [[ $1 =~ ^[0-9]+$ ]]; then
        return 0 # It's an integer
    else
        return 1 # It's not an integer
    fi
}

#===============================================================
#
#   Cache handling
#
#===============================================================

cache_write() {
    local dbg_indent=$dbg_indent

    dbg_print "cache_write()"
    ((dbg_indent++)) # increase indent until this returns

    # abort if not using cache
    $use_cache || {
        dbg_print "skipped task due to not using cache"
        return
    }

    # If no changes have happened, no need to save cache
    $cache_is_changed || {
        dbg_print "skipped task due to no changes"
        return
    }

    # clear previous cache
    echo "$olint_cache_version" >"$f_cache_file"

    # Loop through the array and write all lines in one go
    for key in "${!cache_new[@]}"; do
        value="${cache_new[$key]}"
        echo "$value|$key"
    done >>"$f_cache_file"

    echo
    echo "Saved cache: $f_cache_file"
}

cache_read() {
    #
    #  First line is expected to contain an identifier
    #
    local dbg_indent=$dbg_indent
    local waiting_for_header=true
    local IFS
    local f_name
    local f_date
    local f_mtime

    dbg_print "cache_read()"
    ((dbg_indent++)) # increase indent until this returns

    # abort if not using cache
    $use_cache || {
        dbg_print "skipped task due to not using cache"
        return
    }

    # Check if the file exists and is readable
    if [[ -r "$f_cache_file" ]]; then
        dbg_print "found cache file: $f_cache_file" 3

        # Read each line of the file and add to the array

        while IFS= read -r cached_line; do
            dbg_print "read line: $cached_line" 3
            if $waiting_for_header; then
                [[ "$cached_line" = "$olint_cache_version" ]] || {
                    echo
                    echo "Incorrect cache version"
                    echo "  expected: [$olint_cache_version]"
                    echo "  found:    [$cached_line]"
                    echo
                    echo "Will ignore this cache and replace it in 3 seconds - hit Ctrl-C to abort!"
                    sleep 3
                    break
                }
                waiting_for_header=false
                dbg_print "found correct header: $olint_cache_version" 3
                continue
            else
                IFS='|' read -r f_mtime f_date f_name <<<"$cached_line"
                cache_old["$f_name"]="$f_mtime|$f_date"
            fi
        done <"$f_cache_file"
    fi
}

get_cache_item() {
    #
    #  Returns true ands sets the following global variables
    #  if item matching f_to_check is present in the old cache
    #
    #   f_name
    #   f_mtime
    #   f_date
    #
    local f_to_check="$1"
    local dbg_indent=$dbg_indent
    local cached_item

    dbg_print "get_cache_item($f_to_check)" "$dbglvl_cache_events_more"
    ((dbg_indent++)) # increase indent until this returns

    #
    #  [[ -v cache_old["$f_to_check"] ]] doesnt work on Debian 10
    #  instead first extract it to a variable, then do the check
    #
    cached_item="${cache_old["$f_to_check"]}"
    [[ -n "$cached_item" ]] || {
        dbg_print "item not found" "$((dbglvl_cache_events_more + 1))"
        return 1 # false
    }
    f_name="$f_to_check"
    IFS='|' read -r f_mtime f_date <<<"${cache_old[$f_name]}"
    return 0 # true
}

filename_is_cached() {
    #
    #  If file was in the old cache and is unchanged, this adds
    #  the entry to the new cache and returns True
    #
    local f_to_check="$1"
    local dbg_indent=$dbg_indent

    $use_cache || return 1 # False

    dbg_print "filename_is_cached($f_to_check)" \
        "$dbglvl_cache_events_more"
    ((dbg_indent++)) # increase indent until this returns

    #echo ">= filename_is_cached($1)"
    [[ -z "$f_to_check" ]] && error_msg "filename_is_cached() - called without param"

    #
    #  If f_to_check was present the following variables are set:
    #   f_name f_mtime f_date
    #
    get_cache_item "$f_to_check" || return 1 # False
    [[ "$(get_mtime "$f_name" || true)" -eq "$f_mtime" ]] && {
        cache_add "$f_name" "$f_mtime" "$f_date"
        return 0 # true
    }
    return 1 # False
}

cache_add() {
    #
    #  If available, iving f_mtime and f_date saves a recalculation
    #  and boosts performance.
    #
    local dbg_indent=$dbg_indent
    local f_name="$1"
    local f_mtime="$2" # optional param
    local f_date="$3"  # optional param

    dbg_print "cache_add($f_name)" "$dbglvl_cache_events_basic"
    ((dbg_indent++)) # increase indent until this returns

    $use_cache || return
    [[ -z "$f_mtime" ]] && f_mtime="$(get_mtime "$f_name")"
    [[ -z "$f_date" ]] && f_date="$(mtime_2_date "$f_mtime")"

    cache_is_changed=true
    cache_new["$f_name"]="$f_mtime|$f_date"
    dbg_print "added $f_name = $f_mtime|$f_date" "dbglvl_cache_events_more"
}

#===============================================================
#
#   File Age related
#
#===============================================================

recent_enough() {
    local dbg_indent=$dbg_indent
    local f_name="$1"
    local current_time
    local span_in_seconds

    dbg_print "recent_enough()" 8
    ((dbg_indent++)) # increase indent until this returns
    #error_msg "recent $dbg_indent"

    case "$h_max_age" in
    0) return 0 ;;  # Return right away if no max age is used
    -1) return 1 ;; # Always fail in -s mode
    *) ;;
    esac

    [[ "$h_max_age" = "0" ]] && return 0 # True - No time limit

    if [[ -z "$t_cutoff" ]]; then
        #
        #  For performance reasons only calculate once, and
        #  use a global var
        #
        current_time=$(date +%s) # Get current time in seconds since epoch
        span_in_seconds="$((3600 * h_max_age))"
        t_cutoff="$((current_time - span_in_seconds))"
    fi

    # display_file_age "$fname"
    [[ "$(get_mtime "$f_name" || true)" -lt "$t_cutoff" ]] && {
        return 1 # False
    }
    return 0 # True
}

get_mtime() {
    local fname="$1"

    dbg_print "get_mtime($fname)" "$dbglvl_data_types"
    if [[ "$this_uname" == "Darwin" ]]; then
        # macOS version
        stat -f "%m" "$fname"
    else
        # Linux version
        stat -c "%Y" "$fname"
    fi
}

mtime_2_date() {
    local f_mtime
    local as_date

    dbg_print "mtime_2_date($1)" "$dbglvl_data_types"
    if is_integer "$1"; then
        f_mtime="$1"
    else
        # Assume it is a file name
        f_mtime="$(get_mtime "$1"))"
    fi

    case "$this_uname" in
    "Darwin") as_date="$(date -r "$f_mtime" +'%Y-%m-%d %H:%M:%S')" ;;
    *) as_date="$(date -d "@$f_mtime" +'%Y-%m-%d %H:%M:%S')" ;;
    esac

    dbg_print "result [$as_date]" "$((dbglvl_data_types + 1))"
    echo "$as_date"
}

#===============================================================
#
#   Linting actions
#
#===============================================================

add_plugin_extension() {
    local plugin="$1"
    local ext="$2"
    local item

    dbg_print "add_plugin_extension($plugin, $ext)"
    if [[ -z "${linter_extensions[$ext]}" ]]; then
        # echo "><> created $ext =$plugin"
        linter_extensions[$ext]="$plugin"
    else
        for item in ${linter_extensions[$ext]}; do
            [[ "$item" = "$plugin" ]] && return 0
        done
        # echo "><> appended: $ext $plugin"
        linter_extensions[$ext]+=" $plugin"
    fi
}

add_plugin_file_type() {
    local plugin="$1"
    local file_type="$2"
    local item

    dbg_print "add_plugin_file_type($plugin, $file_type)"

    if [[ -z "${linter_file_types[$file_type]}" ]]; then
        # echo "><> created '$file_type' = $plugin"
        linter_file_types[$file_type]="$plugin"
    else
        for item in ${linter_file_types[$file_type]}; do
            [[ "$item" = "$plugin" ]] && return 0
        done
        # echo "><> appended: $file_type $plugin"
        linter_file_types[$file_type]+=" $plugin"
    fi
}

check_linter_plugins() {
    local dbg_indent=$dbg_indent
    local plugin_dir="$olint_cfg_dir"/plugins
    local file_type

    dbg_print "check_linter_plugins()"
    ((dbg_indent++)) # increase indent until this returns

    for plugin_def in "$plugin_dir"/*; do
        if [[ -f "$plugin_def" ]]; then
            # skip files ending with ~
            [[ "${plugin_def%"~"}" != "$plugin_def" ]] && continue

            dbg_print "Processing file: $plugin_def"

            #  Ensure we dont keep variables over iterations
            unset plugin_name
            unset plugin_cmd
            unset plugin_extensions
            unset plugin_file_types

            # shellcheck disable=SC1090
            source "$plugin_def"
            dbg_print "sourced: $plugin_def"

            # Checks
            #  plugin_name not empty
            [[ -z "$plugin_name" ]] && {
                dbg_print "Plugin $plugin_def - missing: plugin_name" 0
                continue
            }
            #  plugin_cmd  not empty
            [[ -z "$plugin_cmd" ]] && {
                dbg_print "Plugin $plugin_def - missing: plugin_cmd" 0
                continue
            }
            # shellcheck disable=SC2154
            [[ ${#plugin_extensions[@]} -eq 0 ]] &&
                [[ ${#plugin_file_types[@]} -eq 0 ]] && {

                error_msg "Plugin $plugin_def - neither " \
                    "plugin_extensions nor plugin_file_types defined"
            }

            #  plugin_cmd begins with a callable
            cmd_ok="$(verify_lint_cmd "$plugin_cmd")"
            linter_cmd["$plugin_name"]="$cmd_ok"

            for ext in "${plugin_extensions[@]}"; do
                add_plugin_extension "$plugin_name" "$ext"
            done

            for file_type in "${plugin_file_types[@]}"; do
                add_plugin_file_type "$plugin_name" "$file_type"
            done

            # Perform actions on the file here
        fi
    done
}

display_linters() {
    local file_type

    dbg_print "new_display_linters()"

    echo
    echo "Linters detected: "
    for linter_name in "${!linter_cmd[@]}"; do
        echo " $linter_name  - ${linter_cmd[$linter_name]}"
    done
    echo

    echo "Supported extensions:"
    # for ext in "${!linter_extensions[@]}"; do

    # Obtain the keys of the associative array and sort them alphabetically
    keys=$(for ext in "${!linter_extensions[@]}"; do echo "$ext"; done | sort)

    # Iterate through the sorted keys
    for ext in $keys; do
        echo " $ext - handlers: ${linter_extensions[$ext]}"
    done
    echo

    echo "file_types detected: "
    for file_type in "${!linter_file_types[@]}"; do
        echo " '$file_type'  - ${linter_file_types[$file_type]}"
    done
    echo

}

do_parse_linter_def() {
    #
    #  Handles the different notations
    #   linter_cmd
    #   linter_cmd -with -options
    #   ""
    #
    local lint_cmd="$1"
    local task="$2"
    local cmd
    local options
    local verif_cmd

    dbg_print "do_parse_linter_def($lint_cmd,$task)" 2
    if [[ -z "$lint_cmd" ]]; then
        cmd=""
        options=""
    elif [[ "${lint_cmd%"${lint_cmd#?}"}" = "-" ]]; then
        error_msg "linter cmd starts with  [$lint_cmd]" -1
        cmd=""
        options=""
    else
        [[ -n "$task" ]] || error_msg "do_parse_linter_def($lint_cmd) - missing param 2"
        cmd="$(echo "$lint_cmd" | cut -d' ' -f1)"
        options="$(echo "$lint_cmd" | cut -d' ' -f2-)"
    fi

    # if there were no options they will be the same
    [[ "$options" = "$cmd" ]] && options=""

    if [[ -n "$cmd" ]]; then
        verif_cmd="$(command -v "$cmd")" || {
            verif_cmd=""
        }
    else
        verif_cmd=""
    fi
    [[ -z "$verif_cmd" ]] && {
        cmd=""
        options=""
    }

    case "$task" in
    verify)
        [[ -n "$verif_cmd" ]] && [[ -n "$options" ]] && verif_cmd="$verif_cmd $options"
        echo "$verif_cmd"
        ;;

    cmd) echo "$cmd" ;;
    options) echo "$options" ;;
    *) error_msg "do_parse_linter_def() - bad param 1 [$task]" ;;
    esac
    return 0 # True
}

verify_lint_cmd() {
    local lint_cmd="$1"
    local cmd_parsed

    dbg_print "verify_lint_cmd($lint_cmd)" 2

    if cmd_parsed="$(do_parse_linter_def "$lint_cmd" verify)"; then
        echo "$cmd_parsed"
    else
        error_msg "Failed to parse lint cmd: $lint_cmd"
    fi
    dbg_print "- result [$cmd_parsed]"
}

handle_linting_error() {
    #
    #  Either write out allready processed files to cache and then exit
    #  or continue based upon
    #
    $lint_continue && return
    cache_write
    env_cleanup 1
}

show_linter_action() {
    #
    #  Display what linter is used and what file is processed
    #
    local fname="$1"
    local linter="$2"

    # Print using printf with fixed-width formatting
    printf "%-14s: %s\\n" "$linter" "$fname"
}

#===============================================================
#
#   Process files
#
#===============================================================

should_fname_be_excluded() {
    #
    #  Check if fname matches exclusion rules
    #
    local fname="$1"

    for exclude in "${excludes[@]}"; do
        [[ "$fname" == "$exclude" ]] && return 0
    done

    for prefix in "${prefixes[@]}"; do
        [[ "$fname" == "$prefix"* ]] && return 0
    done

    for suffix in "${suffixes[@]}"; do
        [[ "$fname" == *"$suffix" ]] && return 0
    done

    return 1
}

# shellcheck disable=SC2317
handle_ctrl_c() {
    trap '' INT # abort capturing Ctrl-C
    echo
    echo "Ctrl-C captured, terminating olint"
    echo
    echo "Saving allready checked files to cache"
    cache_write
    env_cleanup 1
}

process_file_tree() {
    local dbg_indent=$dbg_indent
    local all_files
    local fname
    local handler_found
    local previous_fname
    local linter

    # extention handling
    # local extension
    # local ext_handlers

    # file type handling
    local file_types
    local file_type
    local lf_type

    dbg_print "process_file_tree()" 0
    ((dbg_indent++)) # increase indent until this returns

    trap 'handle_ctrl_c INT' INT

    #
    #  Loop over al files, sorted by file age, newest firtst.
    #  Then identifying filetype using: file -b
    #  grouping by type, and linting files suitable for such
    #  as they come up. Thereby minimizing pointless wait time, since
    #  the file tree is globally sorted by age
    #
    if [[ $this_uname == "Darwin" ]]; then
        # macOS version
        # shellcheck disable=SC2312
        mapfile -t all_files < <(find . -type f -exec stat -f '%m %N' {} \; | sort -n -r -k1,1 | cut -d' ' -f2- | sed 's#^\./##')
    else
        if test -d /proc/ish; then
            #
            #  iSH kernel doesnt support enough of /proc to make mapfile work
            #
            # shellcheck disable=SC2207
            all_files=($(find . -type f -printf '%T@ %p\n' | sort -n -r -k1,1 | cut -d' ' -f2- | sed 's#^\./##'))
        else
            # all_files=($(find . -type f -printf '%T@ %p\n' | sort -n -r -k1,1 | cut -d' ' -f2))
            # shellcheck disable=SC2312
            mapfile -t all_files < <(find . -type f -printf '%T@ %p\n' | sort -n -r -k1,1 | cut -d' ' -f2- | sed 's#^\./##')
        fi
    fi

    for fname in "${all_files[@]}"; do
        handler_found=false
        # abort after this file
        $abort_after && {
            [[ "$previous_fname" = "./bin_shared/dev/pip-hierarchy2" ]] && break
            previous_fname="$fname"
        }
        [[ -d "$fname" ]] && continue

        should_fname_be_excluded "$fname" && continue

        dbg_print "Examining file: $fname" 1

        # abort if a time limit was set
        recent_enough "$fname" || {
            # maintain cache items if this run is time limited
            dbg_print "to old to be processed" 3
            filename_is_cached "$fname"
            continue
        }

        filename_is_cached "$fname" && {
            echo "no changes: $fname"
            continue
        }

        extension="${fname##*.}"
        if [[ "$extension" != "$fname" ]]; then
            extension=".$extension"
        else
            extension=""
        fi

        [[ -n "$extension" ]] && {
            # echo "><> extension is: [$extension]"
            ext_handlers="${linter_extensions[$extension]}"
            # [[ -n "$ext_handlers" ]] && error_msg "><> ext_handlers [$ext_handlers]"
            for linter in $ext_handlers; do
                handler_found=true
                show_linter_action "$fname" "$linter"
                # echo "using '${linter_cmd["$linter"]}' : $fname"
                eval "${linter_cmd["$linter"]}" "$fname" >"$f_linter_output" || {
                    echo "=====  linter found issues: '${linter_cmd["$linter"]}'  ====="
                    cat "$f_linter_output"
                    handle_linting_error
                    continue
                }
            done
            $handler_found && {
                dbg_print "processed by ext handler - $fname"
                continue
            }
        }

        # error_msg "linters for ${linter_file_types['Bourne-Again shell script*']}"
        IFS='|' read -r -a file_types <<<"$(file -b "$fname" | sed 's#, #|#g')"

        for file_type in "${file_types[@]}"; do
            # echo "examing file_type [$file_type]"
            for lf_type in "${!linter_file_types[@]}"; do
                # shellcheck disable=SC2053
                [[ "$file_type" == $lf_type ]] && {
                    dbg_print "matching lf_type [$lf_type]" 3
                    for linter in ${linter_file_types["$lf_type"]}; do
                        handler_found=true
                        # echo "$fname  - $linter"
                        # Print using printf with fixed-width formatting
                        show_linter_action "$fname" "$linter"

                        # echo "><> -----   handling it using [$linter]"
                        # echo "using '${linter_cmd["$linter"]}' : $fname"
                        eval "${linter_cmd["$linter"]}" "$fname" >"$f_linter_output" || {
                            echo "=====  linter found issues: '${linter_cmd["$linter"]}'  ====="
                            cat "$f_linter_output"
                            handle_linting_error
                            continue 4
                        }
                        # [[ -s "$f_linter_output" ]] && {
                        #     echo
                        #     echo "><> output without error"
                        #     cat "$f_linter_output"
                        #     echo
                        # }
                    done
                }
                $handler_found && {
                    dbg_print "processed as '$lf_type' - $fname"
                    # echo "processed by ext handler - $fname"
                    continue 3
                }
            done
            # $handler_found && {
            #     echo "[2] processed file_type [$file_type] - $fname"
            #     continue 2
            # }
            error_msg "Unsupported file type - $fname"
        done
        # $handler_found && {
        #     echo "processed by some file_type handler - $fname"
        #     continue
        # }
    done

    trap '' INT # abort capturing Ctrl-C
    cache_write
}

show_help() {
    echo "Usage: $prog_name [-h] [-c] [-l] [-n] [-v] [number]

Lint all files recursively in reverse chronological order.

Available options:

-h, --help        Print this help and exit
-c, --continue    Continue with the next file after linter issues are found.
-l, --linters     List supported and used linters and excluded file patterns.
-n, --nocache     Don't use caching for successfully linted files.
-N, --clearcache  Remove cache file if present.
-v, --verbose     Increase verbosity. Multiple -v flags can be used to
                  increase verbosity level.
number            Only check files changed in the last number hours.

Supported linters: shellcheck, checkbashisms, flake8, vale

If a file is successfully linted, the filename and time of the latest change
are saved in a cache (.cache.olint). Next time olint is run, files that have
not been changed are skipped.

The .olint.conf file can be used to define which linters should be used and
optionally set specific parameters for them. This file can also define which
files should be ignored. See README.md for more information about this file.
"
    env_cleanup 0
}

#===============================================================
#
#   Main
#
#===============================================================

prog_name=$(basename "$0")
this_uname="$(uname -s)"

dbg_indent=1 # used to indent printoutd in dbg_print
#
#  Some debug level constants, to make it easier to limit what
#  is displayed
#
dbglvl_cache_events_basic=3
dbglvl_cache_events_more="$((dbglvl_cache_events_basic + 1))"
# dbglvl_linting_basic=2
# dbglvl_linting_details="$((dbglvl_linting_basic + 1))"
dbglvl_data_types=8

# Will only be updated if cache format is changed
olint_cache_version="olint cache vers: 0.2.4"
cache_is_changed=false
f_cache_file=".cache.olint" # mtime|date|fname
declare -A cache_old        # What is read from cache file
declare -A cache_new        # What will be written to cache file

f_linter_output=/tmp/olint["$$"]-linter-output

declare -A linter_cmd
declare -A linter_extensions
declare -A linter_file_types

abort_after=false       # (unofficial olint dev) option: -a
lint_continue=false     # option: -c
b_display_linters=false # option: -l
use_cache=true          # option: -n
# show_stats=false        # (unofficial olint dev) option: -s
debug_level=0 # option: -v
h_max_age=0   # no max file age for items to be processed

while [[ -n "$1" ]]; do
    case $1 in

    -h | --help)
        # shellcheck disable=SC2317
        show_help || error_msg "show_help() failure"
        ;;

    -a) abort_after=true ;; # Unofficial option for olint dev

    -c | --continue) lint_continue=true ;;

    -C) # Suport for ./deploy - prints out the config dir
        select_config_dir
        echo "$olint_cfg_dir"
        env_cleanup 0
        ;;

    -l | --linters) b_display_linters=true ;;
    -n | --nocache) use_cache=false ;;

    -N | --clearcache)
        if [[ -f "$f_cache_file" ]]; then
            echo "Removing $f_cache_file"
            rm -f "$f_cache_file"
        else
            echo "No cache found: $f_cache_file"
        fi
        env_cleanup 0
        ;;

    -v | --verbose) ((debug_level++)) ;;

    *[!0-9]*) error_msg "Unrecognized option: $1" ;;

    *) # only remaining param type is an int
        h_max_age="$1"
        echo "Will only check files changed in the last $h_max_age"
        ;;

    esac
    shift
done

[[ "$debug_level" -gt 0 ]] && echo "Debug lvl is: $debug_level"

select_config_dir
get_config
check_linter_plugins

$lint_continue && echo "Will contine with next file if linter found issues"
$use_cache || echo "Will not use cache for checked files"
echo

$b_display_linters && {
    display_linters
    env_cleanup 0
}

cache_read
process_file_tree
env_cleanup 0
